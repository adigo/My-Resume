{"version":3,"sources":["resumeContent.js","components/ResumeHeader.js","components/resumeContent/parts/Experience.js","components/resumeContent/parts/Education.js","components/resumeContent/parts/Project.js","components/resumeContent/parts/SkillBars.js","components/resumeContent/ResumeContent.js","App.js","serviceWorker.js","index.js"],"names":["resumeContent","name","title","location","selfIntroduction","email","phone","githubUsername","experiences","company","date","details","educations","major","school","projects","skills","ResumeHeader","useState","openSnackbar","setOpenSnackbar","snackbarMessage","setSnackbarMessage","className","Button","color","onClick","event","content","navigator","clipboard","writeText","then","startIcon","link","window","open","Snackbar","autoHideDuration","onClose","handleCloseSnackBar","Alert","variant","severity","Experience","map","experience","detail","Education","education","Project","project","SkillBars","skill","Chip","clickable","size","label","ResumeContent","App","Grid","container","justify","item","xs","Paper","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8ae02519.chunk.js","sourcesContent":["export const resumeContent = {\n  name: \"王大力\",\n  title: \"Software Engineer\",\n  location: \"Bay Area\",\n  selfIntroduction: \"假装自己写了很多描述假装自己写了很多描述假装自己写了很多描述假装自己写了很多描述假装自己写了很多描述假装自己写了很多描述假装自己写了很多描述假装自己写了很多描述假装自己写了很多描述假装自己写了很多描述假装自己写了很多描述假装自己写了很多描述假装自己写了很多描述假装自己写了很多描述假装自己写了很多描述假装自己写了很多描述假装自己写了很多描述假装自己写了很多描述假装自己写了很多描述假装自己写了很多描述假装自己写了很多描述假装自己写了很多描述\",\n  email: \"shangan.xiaoyugan@gmail.com\",\n  phone: \"123-456-7890\",\n  githubUsername: \"dummyUser\",\n  experiences: [\n    {\n      title: \"Software Engineer\",\n      company: \"Google\",\n      date: \"January 2019 to present\",\n      details: [\n          \"item1\",\n          \"item2\",\n          \"item3\",\n          \"item4\",\n      ]\n    },\n    {\n      title: \"Software Engineer\",\n      company: \"Google\",\n      date: \"January 2019 to present\",\n      details: [\n        \"item1\",\n        \"item2\",\n        \"item3\",\n        \"item4\",\n      ]\n    },\n  ],\n  educations: [\n    {\n      major: \"Master of Computer Science\",\n      date: \"March 2019 - May 2020\",\n      school: \"University of California, Berkly\"\n    }\n  ],\n  projects: [\n    {\n      title: \"Course Enrollment System\",\n      details: [\n          \"item1\",\n          \"item2\",\n          \"item3\",\n          \"item4\",\n      ]\n    }\n  ],\n  skills: [\n      \"Java\",\n      \"AWS\",\n      \"C++\",\n      \"Kubernetes\",\n  ]\n};","import React, {useState} from 'react';\nimport {resumeContent} from \"../resumeContent\";\nimport EmailIcon from '@material-ui/icons/Email';\nimport Button from \"@material-ui/core/Button\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Alert from '@material-ui/lab/Alert';\nimport PhoneIcon from '@material-ui/icons/Phone';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport './ResumeHeader.css';\n\nexport default function ResumeHeader() {\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState(\"\");\n\n  return (\n      <div className=\"resume-header background-color-purple\">\n        <h2>{resumeContent.name}</h2>\n        <h4>{resumeContent.title}</h4>\n        <h5>{resumeContent.location}</h5>\n        <p>{resumeContent.selfIntroduction}</p>\n        <div>\n          <Button color=\"primary\"\n                  onClick={event => handleItemClicked(resumeContent.email)}\n                  startIcon={<EmailIcon />}>\n            {resumeContent.email}\n          </Button>\n        </div>\n        <p><PhoneIcon />{resumeContent.phone}</p>\n        <div>\n          <Button color=\"primary\"\n                  onClick={event => openLink(`https://github.com/${resumeContent.githubUsername}`)}\n                  startIcon={<GitHubIcon />}>\n            {resumeContent.githubUsername}\n          </Button>\n        </div>\n        <Snackbar open={openSnackbar} autoHideDuration={6000} onClose={handleCloseSnackBar}>\n          <Alert onClose={handleCloseSnackBar} variant=\"filled\" severity=\"success\">\n            {snackbarMessage}\n          </Alert>\n        </Snackbar>\n      </div>\n  );\n\n  function handleItemClicked(content) {\n    navigator.clipboard.writeText(content)\n        .then(() => {\n          setOpenSnackbar(true);\n          setSnackbarMessage(`Successfully copied \"${content}\" to clipboard!`);\n        });\n  }\n\n  function openLink(link) {\n    window.open(link);\n  }\n\n  function handleCloseSnackBar() {\n    setOpenSnackbar(false);\n  }\n}","import React from \"react\";\nimport WorkIcon from '@material-ui/icons/Work';\nimport '../ResumeContent.css';\nimport {resumeContent} from \"../../../resumeContent\";\n\nexport default function Experience() {\n  return (\n      <div>\n        <div className=\"content-title margin-bottom-20px\"><WorkIcon /> Experience</div>\n        {renderExperiences()}\n      </div>\n  );\n\n  function renderExperiences() {\n    return resumeContent.experiences.map(experience => {\n      return (\n          <div>\n            <b className=\"margin-left-20\">{experience.title}</b>\n            <div className=\"margin-left-20\">{experience.company}</div>\n            <div className=\"margin-left-20\">{experience.date}</div>\n            <ul>\n              {experience.details.map(detail => {\n                return (\n                    <li className=\"grey\">{detail}</li>\n                );\n              })}\n            </ul>\n          </div>\n      );\n    });\n  }\n}","import React from \"react\";\nimport {resumeContent} from \"../../../resumeContent\";\nimport SchoolIcon from '@material-ui/icons/School';\n\nexport default function Education() {\n  return(\n      <div>\n        <div className=\"content-title margin-bottom-20px\"><SchoolIcon /> Education</div>\n        {renderEducation()}\n      </div>\n  );\n\n  function renderEducation() {\n    return resumeContent.educations.map(education => {\n      return (\n          <div className=\"margin-left-20\">\n            <b>{education.major}</b>\n            <div>{education.date}</div>\n            <div className=\"grey\">{education.school}</div>\n          </div>\n      );\n    });\n  }\n}","import React from \"react\";\nimport {resumeContent} from \"../../../resumeContent\";\nimport StarIcon from '@material-ui/icons/Star';\n\nexport default function Project() {\n  return(\n      <div>\n        <div className=\"content-title margin-bottom-20px\"><StarIcon /> Project</div>\n        {renderProject()}\n      </div>\n  );\n\n  function renderProject() {\n    return resumeContent.projects.map(project => {\n      return (\n          <div>\n            <b className=\"margin-left-20\">{project.title}</b>\n            <ul>\n              {project.details.map(detail => <li>{detail}</li>)}\n            </ul>\n          </div>\n      );\n    });\n  }\n}","import React from 'react';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\nimport {resumeContent} from \"../../../resumeContent\";\nimport Chip from \"@material-ui/core/Chip\";\n\n\nexport default function SkillBars() {\n    return (\n        <div>\n          <div className=\"content-title margin-bottom-20px\"><AttachFileIcon /> Skills</div>\n          <div>\n            {renderSkills()}\n          </div>\n        </div>\n    );\n\n    function renderSkills() {\n      return resumeContent.skills.map(skill =>\n          <Chip clickable\n                size=\"small\"\n                label={skill}\n                className=\"background-color-purple margin-left-20\"/>)\n    }\n}\n","import React from 'react';\nimport Experience from \"./parts/Experience\";\nimport Education from \"./parts/Education\";\nimport Project from \"./parts/Project\";\nimport SkillBars from \"./parts/SkillBars\";\n\nexport default function ResumeContent() {\n  return (\n      <div>\n        <Experience />\n        <Project />\n        <Education />\n        <SkillBars />\n      </div>\n  );\n}","import React from 'react';\nimport './App.css';\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport ResumeHeader from \"./components/ResumeHeader\";\nimport ResumeContent from \"./components/resumeContent/ResumeContent\";\n\nfunction App() {\n  return (\n      <Grid container justify=\"center\">\n        <Grid container item xs={4}>\n          <ResumeHeader className=\"full-size\"/>\n        </Grid>\n        <Grid container item xs={8}>\n          <Paper className=\"full-size\">\n            <ResumeContent />\n          </Paper>\n        </Grid>\n      </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}